4.1
1)
Create the Customer table with the following columns. 
CustomerId	Number(5)
Cust_Name	varchar2(20)
Address1	Varchar2(30)
Address2 	Varchar2(30)



CREATE TABLE customer_table(
customerid number(5),
cust_name varchar2(20),
addredd1 varchar2(30),
address2 varchar2(30));



2)
Modify the Customer table Cust_Name column of datatype with Varchar2(30), rename the column to CustomerName and it should not accept Nulls.

ALTER TABLE customer_table
modify cust_name varchar2(30) not null;

Table altered

ALTER TABLE customer_table
rename column cust_name to customername;



3)
a) Add the following Columns to the Customer table. 
Gender		Varchar2(1)
Age		Number(3)
PhoneNo	Number(10)
 b) Rename the Customer table to Cust_Table


ALTER TABLE customer_table add
(gender varchar2(1),
age number(3),
phoneno number(10)
);

table altered



4)
Insert rows with the following data in to the Customer table.
Insert into customer values: (1000, ‘Allen’, ‘#115 Chicago’, ‘#115 Chicago’, ‘M’, ‘25, 7878776’)
In similar manner, add the below records to the Customer table:
1001, George, #116 France, #116 France, M, 25, 434524
1002, Becker, #114 New York, #114 New York, M, 45, 431525


Rename customer_table to cust_table

table renamed

Insert into cust_table values(1001,'George','#114 France','#116 France','m',25,434524);

1 row created.

Insert into cust_table values(1002, 'Becker', '#114 New York','#114New York','m',45,431525);

1 row created.

Insert into cust_table values(1000,'Allen','#115 Chicago','#115 Chicago','m',25,7878776);

1 row created.



5)
Add the Primary key constraint for Customerld with the name Custld_Prim. 

ALTER TABLE cust_table ADD CONSTRAINTS custid_prim primary key
(customerid);
Table altered.

6)
Insert the row given below in the Customer table and see the message generated by the Oracle server. 
1002, John, #114 Chicago, #114 Chicago, M, 45, 439525


INSERT into cust_table values(1002,'john','#114 Chicago', '#114 Chicago','m',45,439525);

7)
Disable the constraint on CustomerId, and insert the following data:
1002, Becker, #114 New York, #114 New york , M, 45, 431525
1003, Nanapatekar, #115 India, #115 India , M, 45, 431525


ALTER TABLE cust_table disable constraints custid_prim;

table altered.

Insert into cust_table values(1002, 'becker', '#114 Chicago', '#114 chicago','m',45,431525);

1 row created.

Insert into cust_table values (1003,'nanapatekar', '#115 India', '#115 India','m',45,431525);

1 row created.


8)
Enable the constraint on CustomerId of the Customer table, and see the message generated by the Oracle server. 

Alter table cust_table enable constraint custid_prim;


9)
Drop the constraint Custld_Prim on CustomerId and insert the following Data. Alter Customer table, drop constraint Custid_Prim.
1002, Becker, #114 New York, #114 New york , M, 45, 431525, 15000.50
1003, Nanapatekar, #115 India, #115 India , M, 45, 431525, 20000.50


ALTER TABLE cust_table
drop constraints custid_prim;

Table altered.

Alter table cust_table
add(cust_amount number(10,2));

table altered.


10)
Delete all the existing rows from Customer table, and let the structure remain itself using TRUNCATE statement. 


TRUNCATE TABLE cust_table;

Table truncated;

select * from cust_table;


11.
In the Customer table, add a column E_mail. 

alter table cust_table add(E_mail varchar2(40));


12. 
Drop the E_mail column from Customer table. 


alter table cust_table drop column E_mail;


13. 
Create the Suppliers table based on the structure of the Customer table. Include only the CustomerId, CustomerName, Address1, Address2, and phoneno columns. 
Name the columns in the new table as SuppID, SName, Addr1, Addr2, and Contactno respectively. 


create table suppliers(
		SuppID    NUMBER(5),
		SName     varchar2(30),
		Addr1	  varchar2(30),
		Addr2     varchar2(30),
		Contactno NUMBER(10)
		);


14. 
Drop the above table and recreate the following table with the name CustomerMaster. 
CustomerId	Number(5) Primary key(Name of constraint is CustId_PK)
CustomerName	Varchar2(30) Not Null
Addressl	Varchar2(30) Not Null
Address2	Varchar2(30)
Gender		Varchar2(l)
Age		Number(3)
PhoneNo	Number(10)

DROP TABLE suppliers;




15. 
Create the AccountsMaster table with the following Columns. Use sequence to generate Account number
Customerld		Number(5)
AccountNumber		Number(10,2) Primary key(Name of constraint is Acc_PK)
AccountType		Char(3)
LedgerBalance		Number(10,2) Not Null


CREATE TABLE Accountsmaster(
    customerid NUMBER(5),
    Accountnumber NUMBER(10,2)
    CONSTRAINT Acc_pk PRIMARY KEY,
    Accountype  char(3),
    LedgerBalance NUMBER(10,2) NOT NULL
	);



16. 
Relate AccountsMaster table and CustomerMaster table through Customerld column with the constraint name Cust_acc.


ALTER TABLE Accountsmaster MODIFY
    ( CONSTRAINT Cust_Acc FOREIGN KEY(Customerid)
     REFERENCES customermaster(customerid)
      );
17. 
Insert the following rows to the CustomerMaster table:
1000, Allen, #115 Chicago, #115 Chicago, M, 25, 7878776
1001, George, #116 France, #116 France, M, 25, 434524
1002, Becker, #114 New York, #114 New York, M, 45, 431525.


INSERT INTO customermaster VALUES (1000, 'Allen', '#115 Chicago', '#115 chicago','M',25,7878776);
INSERT INTO customermaster VALUES (1001, 'George', '#116 France', '#116 France','M',25,434524);
INSERT INTO customermaster VALUES (1003, 'Becker', '#114 New York','#114 New York','M',45,431525);



18. 
Modify the AccountMaster table with the Check constraint to ensure AccountType should be either NRI or IND.

ALTER TABLE Accountsmaster MODIFY (CONSTRAINT acco_type CHECK('accountype='NRI' OR accountype='IND'));



19.  
Modify the AccountsMaster table keeping a Check constraint with the name Balance_Check for the Minimum Balance which should be greater than 5000. 


ALTER TABLE accountsmaster MODIFY 
     ( ledgerbalance CONSTRAINT ledgerbalance_check CHECk(ledgerbalance>5000));



20.
Modify the AccountsMaster table such that if Customer is deleted from Customer table then all his details should be deleted from AccountsMaster table. 

ALTER TABLE accountsmaster DROP CONSTRAINT cust_acc;



21)
Create Backup copy for the AccountsMaster table with the name ‘AccountDetails’. 

create table accountdetails as select * from accuontsmaster;

Table created.



22)
Create a view ‘Acc_view’ with columns Customerld, CustomerName, AccountNumber, AccountType, and LedgerBalance from AccountsMaster. In the view Acc_view, the column names should be CustomerCode, AccountHolderName, AccountNumber, Type, and Balance for the respective columns from AccountsMaster table. 


create view Acc_view as select customerid as
customercode, accountnumber as accountnumber, accountype as type,
ledgerbalance as balance from accountsmaster;

view created.


23)
Create a view on AccountsMaster table with name vAccs_Dtls. This view should list all customers whose AccountType is ‘IND’ and their balance amount should not be less than 10000. Using this view any DML operation should not violate the view conditions. 

Hint: Use the With Check Option constraint


create view vacc_dtls as select * from accountsmaster
where accountype='IND' and ledgerbalance >= 10000;

view created

select * from vacc_dtls;


24)
Create a view accsvw10 which will not allow DML statement against it.

create view accsvw10 as select * from accountmaster1 with read only;

view created;


25)
Create a Sequence with the name Seq_Dept on Deptno column of Department_Masters table. It should start from 40 and stop at 200. Increment parameter for the sequence Seq_Dept should be in step of 10.


create sequence seq_dept
increment by 10
minvalue 40
maxvalue 200;

sequence created.



26)
Insert three sample rows by using the above sequence in Department_Masters table.


INSERT into department_master values(seq_dept.nextval,'oop');

1 row created.

INSERT into department_master values(seq_dept.nextval,'Dbms');

1 row created.

select * from department_master;

27)
Drop the Seq_Dept sequence. 


drop sequence seq_dept;

sequence dropped.

28)
Get information on the index No_Name from the Data Dictionary. 

select  no_name from data dictionary;


29)
Create synonym synEmp for the EMP table. 

create synonym synemp for emp;

synonym created.


30)
Get Information on synonym synEmp from the Data Dictionary.

select * from synemp;

14 rows selected.

31)
Note: Perform this after creating the Employee Table mentioned in the next Lab assignment. Create Index on HireDate column and give the name as idx_emp_hiredate for this object. 


create index idx_emp_hire hiredate on employee(hiredate);



32)
Create a Sequence with the name Seq_Emp on Empno column of Employee table. It should start from 1001. Try to set Minimum value for this sequence which is less than / greater than 1001, use the sequence to generate Empno while inserting records in Employee table and check the values generated.


create sequence seq_emp
increment by 10
start with 1001
minvalue 200
insert into employee_table
values
seq_emp.nextval,'&ename','&job',&mgr,'&hiredate', &sal,&comm,&deptno);



